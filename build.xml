<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License,
Version 2.0 (the "License"); you may not use this file except in
compliance with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<project name="pivot" default="compile">
    <path id="classpath.javalib">
        <fileset dir="${java.home}/lib" includes="**/*.jar"/>
    </path>

    <!-- Properties that affect the directories that are created as part of the build -->
    <property name="folder.bin" value="ant-bin"/>
    <property name="folder.dist" value="dist"/>
    <property name="folder.doc" value="doc"/>
    <property name="folder.install" value="install"/>
    <property name="folder.lib" value="lib"/>
    <property name="folder.deploy" value="deploy"/>

    <!-- Keystore properties -->
    <property name="keystore.location" value="etc/pivot.keystore"/>
    <property name="keystore.alias" value="pivot"/>
    <property name="keystore.passwd" value="apache"/>

    <!-- Compiler properties -->
    <property name="compiler.deprecation" value="true"/>
    <property name="compiler.debug" value="false"/>
    <property name="compiler.target" value="1.6"/>
    <property name="compiler.encoding" value="UTF-8"/>
    <property name="compiler.indexJars" value="true"/>
    <property name="compiler.arg" value="-Xlint"/>

    <!-- Test properties -->
    <property name="test.verbose" value="false"/>

    <!-- Dynamic properties -->
    <property file="build.properties"/>
    <property name="release" value="apache-${ant.project.name}-${version}"/>

    <!-- Jar file names -->
    <property name="jar.charts" value="${ant.project.name}-charts-${version}.jar" />
    <property name="jar.core" value="${ant.project.name}-core-${version}.jar" />
    <property name="jar.demos" value="${ant.project.name}-demos-${version}.jar" />
    <property name="jar.tools" value="${ant.project.name}-tools-${version}.jar" />
    <property name="jar.tutorials" value="${ant.project.name}-tutorials-${version}.jar" />
    <property name="jar.web" value="${ant.project.name}-web-${version}.jar" />
    <property name="jar.web-server" value="${ant.project.name}-web-server-${version}.jar" />
    <property name="jar.wtk" value="${ant.project.name}-wtk-${version}.jar" />
    <property name="jar.wtk-terra" value="${ant.project.name}-wtk-terra-${version}.jar" />

    <!-- Ant version check -->
    <fail message="Building Pivot requires Apache Ant 1.7 or greater.">
        <condition>
            <not>
                <contains string="${ant.version}" substring="1.7"/>
            </not>
        </condition>
    </fail>

    <!-- Compile macro -->
    <macrodef name="compile">
        <attribute name="project"/>
        <attribute name="srcDir" default="src"/>
        <element name="classpath-elements" optional="true" implicit="true"/>

        <sequential>
            <!-- JDK version check -->
            <fail message="Building Pivot requires JDK 1.6 or greater.">
                <condition>
                    <not>
                        <or>
                            <equals arg1="${ant.java.version}" arg2="1.6"/>
                            <equals arg1="${ant.java.version}" arg2="1.7"/>
                        </or>
                    </not>
                </condition>
            </fail>

            <!-- JUnit check -->
            <fail message="JUnit 4 not found. Please see the BUILD file for more information.">
                <condition>
                    <not>
                        <available classname="org.junit.Test"/>
                    </not>
                </condition>
            </fail>

            <mkdir dir="@{project}/${folder.bin}"/>
            <javac srcdir="@{project}/@{srcDir}"
                destDir="@{project}/${folder.bin}"
                includejavaruntime="true"
                deprecation="${compiler.deprecation}"
                debug="${compiler.debug}"
                target="${compiler.target}"
                encoding="${compiler.encoding}"
                failonerror="true">
                <compilerarg line="${compiler.arg}"/>
                <classpath>
                    <path refid="classpath.javalib"/>
                    <classpath-elements/>
                </classpath>
            </javac>
        </sequential>
    </macrodef>

    <!-- Test macro -->
    <macrodef name="test">
        <attribute name="project"/>
        <element name="classpath-elements" optional="true" implicit="true"/>

        <sequential>
            <echo message="@{project}: Executing test cases"/>

            <condition property="test.formatter">
                <istrue value="${test.verbose}"/>
            </condition>

            <junit fork="true">
                <classpath>
                    <classpath-elements/>
                </classpath>

                <formatter type="brief" usefile="false" if="test.formatter"/>

                <batchtest>
                    <fileset dir="@{project}/test" includes="**/*Test.java"/>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

    <!-- Package macro -->
    <macrodef name="package">
        <attribute name="project"/>
        <attribute name="jarFile"/>
        <attribute name="title"/>

        <sequential>
            <mkdir dir="${folder.lib}"/>
            <jar destfile="${folder.lib}/@{jarFile}" index="${compiler.indexJars}">
                <metainf dir="${basedir}">
                    <include name="LICENSE"/>
                    <include name="NOTICE"/>
                    <include name="README"/>
                </metainf>
                <manifest>
                    <attribute name="Sealed" value="true"/>
                    <attribute name="Implementation-Vendor-Id" value="org.apache"/>
                    <attribute name="Implementation-Vendor" value="The Apache Software Foundation"/>
                    <attribute name="Implementation-Title" value="Apache Pivot @{title}"/>
                    <attribute name="Implementation-Version" value="${version}"/>
                </manifest>
                <fileset dir="@{project}/${folder.bin}">
                    <exclude name="**/test/**"/>
                </fileset>
                <fileset dir="@{project}/src">
                    <exclude name="**/*.java"/>
                    <exclude name="**/package.html"/>
                </fileset>
            </jar>
        </sequential>
    </macrodef>

    <macrodef name="clean-www">
        <attribute name="project"/>

        <sequential>
            <delete dir="@{project}/www/lib"/>
            <delete file="@{project}/www/version.jsp"/>
            <delete file="@{project}/www/version.js"/>
        </sequential>
    </macrodef>

    <!-- Aggregate targets -->
    <target name="compile" description="Compiles all projects"
        depends="compile-main, compile-test"/>

    <target name="compile-main"
        depends="charts, core, demos, tools, tutorials, web, web-server, wtk, wtk-terra"/>

    <target name="compile-test"
        depends="core-test, web-test, wtk-test"/>

    <target name="package"
        depends="charts-package, core-package, demos-package, tools-package, tutorials-package,
                 web-package, web-server-package, wtk-package, wtk-terra-package"/>

    <target name="test"
        depends="core-test-run, web-test-run"/>

    <target name="clean" description="Removes all build artifacts"
        depends="charts-clean, core-clean, demos-clean, tools-clean, tutorials-clean, web-clean,
                 web-server-clean, wtk-clean, wtk-terra-clean">
        <delete dir="${folder.dist}"/>
        <delete dir="${folder.doc}"/>
        <delete dir="${folder.install}"/>
        <delete dir="${folder.lib}"/>
    </target>

    <!-- Javadoc -->
    <target name="doc" description="Generates API documentation in ${folder.doc}">
        <javadoc packagenames="org.apache.pivot.*" destdir="${folder.doc}"
            author="true" version="true" use="true"
            classpath="${java.class.path}">
            <classpath>
                <fileset dir="web-server/lib" includes="**/*.jar"/>
                <path refid="classpath.javalib"/>
            </classpath>

            <packageset dir="charts/src" includes="**/*"/>
            <packageset dir="core/src" includes="**/*"/>
            <packageset dir="tools/src" includes="**/*"/>
            <packageset dir="web/src" includes="**/*"/>
            <packageset dir="web-server/src" includes="**/*"/>
            <packageset dir="wtk/src" includes="**/*"/>
            <packageset dir="wtk-terra/src" includes="**/*"/>

            <link href="http://java.sun.com/javase/6/docs/api"/>
            <link href="http://java.sun.com/j2ee/1.4/docs/api"/>
        </javadoc>
    </target>

    <!-- charts -->
    <target name="charts" depends="core, wtk">
        <compile project="charts">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="wtk/${folder.bin}"/>
        </compile>
    </target>

    <target name="charts-package" depends="charts">
        <package project="charts" jarFile="${jar.charts}" title="Charts"/>
    </target>

    <target name="charts-clean">
        <delete dir="charts/${folder.bin}"/>
        <delete file="${folder.lib}/${jar.charts}"/>
    </target>

    <!-- core -->
    <target name="core">
        <compile project="core"/>
    </target>

    <target name="core-package" depends="core">
        <package project="core" jarFile="${jar.core}" title="Core"/>
    </target>

    <target name="core-clean">
        <delete dir="core/${folder.bin}"/>
        <delete file="${folder.lib}/${jar.core}"/>
    </target>

    <target name="core-test" depends="core">
        <compile project="core" srcDir="test">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="core/test"/>
        </compile>
    </target>

    <target name="core-test-run" depends="core-test">
        <test project="core">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="core/test"/>
        </test>
    </target>

    <!-- demos -->
    <target name="demos" depends="core, wtk, web">
        <compile project="demos">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="web/${folder.bin}"/>
            <pathelement location="wtk/${folder.bin}"/>
        </compile>
    </target>

    <target name="demos-package" depends="demos">
        <package project="demos" jarFile="${jar.demos}" title="Demos"/>
    </target>

    <target name="demos-clean">
        <delete dir="demos/${folder.bin}"/>
        <delete dir="demos/${folder.deploy}"/>
        <delete file="${folder.lib}/${jar.demos}"/>
    </target>

    <!-- tools -->
    <target name="tools" depends="core, wtk, web">
        <compile project="tools">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="web/${folder.bin}"/>
            <pathelement location="wtk/${folder.bin}"/>
        </compile>
    </target>

    <target name="tools-package" depends="tools">
        <package project="tools" jarFile="${jar.tools}" title="Tools"/>
    </target>

    <target name="tools-clean">
        <delete dir="tools/${folder.bin}"/>
        <delete file="${folder.lib}/${jar.tools}"/>
    </target>

    <!-- tutorials -->
    <target name="tutorials" depends="core, wtk, web, tools">
        <compile project="tutorials">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="web/${folder.bin}"/>
            <pathelement location="wtk/${folder.bin}"/>
            <pathelement location="tools/${folder.bin}"/>
        </compile>
    </target>

    <target name="tutorials-package" depends="tutorials">
        <package project="tutorials" jarFile="${jar.tutorials}" title="Tutorials"/>
    </target>

    <target name="tutorials-clean">
        <delete dir="tutorials/${folder.bin}"/>
        <delete file="${folder.lib}/${jar.tutorials}"/>
        <clean-www project="tutorials"/>
    </target>

    <!-- web -->
    <target name="web" depends="core">
        <compile project="web">
            <pathelement location="core/${folder.bin}"/>
        </compile>
    </target>

    <target name="web-package" depends="web">
        <package project="web" jarFile="${jar.web}" title="Web Queries"/>
    </target>

    <target name="web-clean">
        <delete dir="web/${folder.bin}"/>
        <delete file="${folder.lib}/${jar.web}"/>
    </target>

    <target name="web-test" depends="web">
        <compile project="web" srcDir="test">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="web/${folder.bin}"/>
        </compile>
    </target>

    <target name="web-test-run" depends="web-test">
        <test project="web">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="web/${folder.bin}"/>
        </test>
    </target>

    <!-- web-server -->
    <target name="web-server" depends="core, web">
        <compile project="web-server">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="web/${folder.bin}"/>
            <fileset dir="web-server/lib" includes="**/*.jar"/>
        </compile>
    </target>

    <target name="web-server-package" depends="web-server">
        <package project="web-server" jarFile="${jar.web-server}" title="Web Queries Server"/>
    </target>

    <target name="web-server-clean">
        <delete dir="web-server/${folder.bin}"/>
        <delete file="${folder.lib}/${jar.web-server}"/>
    </target>

    <!-- wtk -->
    <target name="wtk" depends="core">
        <!-- Fail descriptively if the user's classpath is not set up correctly -->
        <fail message="LiveConnect not found. Please see the BUILD file for more information.">
            <condition>
                <not>
                    <available classname="netscape.javascript.JSObject"
                        classpathref="classpath.javalib"/>
                </not>
            </condition>
        </fail>

        <compile project="wtk">
            <pathelement location="core/${folder.bin}"/>
        </compile>
    </target>

    <target name="wtk-package" depends="wtk">
        <package project="wtk" jarFile="${jar.wtk}" title="WTK"/>
    </target>

    <target name="wtk-clean">
        <delete dir="wtk/${folder.bin}"/>
        <delete file="${folder.lib}/${jar.wtk}"/>
    </target>

    <target name="wtk-test" depends="core, wtk">
        <compile project="wtk" srcDir="test">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="wtk/${folder.bin}"/>
        </compile>
    </target>

    <!-- wtk-terra -->
    <target name="wtk-terra" depends="core, wtk">
        <compile project="wtk-terra">
            <pathelement location="core/${folder.bin}"/>
            <pathelement location="wtk/${folder.bin}"/>
        </compile>
    </target>

    <target name="wtk-terra-package" depends="wtk-terra">
        <package project="wtk-terra" jarFile="${jar.wtk-terra}" title="WTK Terra Theme Provider"/>
    </target>

    <target name="wtk-terra-clean">
        <delete dir="wtk-terra/${folder.bin}"/>
        <delete file="${folder.lib}/${jar.wtk-terra}"/>
    </target>

    <!-- Package source distribution -->
    <target name="dist" description="Generates source release in ${folder.dist}"
        depends="clean, trim-whitespace">
        <mkdir dir="${folder.dist}/${release}-src"/>

        <!-- Copy the source files to the release folder -->
        <copy todir="${folder.dist}/${release}-src">
            <fileset dir="${basedir}">
                <include name="**/*"/>

                <!-- Exclude hidden files and folders -->
                <exclude name="**/.*/**"/>

                <!-- Exclude folders containing compilation artifacts -->
                <exclude name="**/${folder.bin}/**"/>
                <exclude name="${folder.dist}/**"/>
                <exclude name="${folder.doc}/**"/>
                <exclude name="${folder.install}/**"/>
                <exclude name="${folder.lib}/**"/>
            </fileset>
        </copy>

        <!-- Create .zip archive -->
        <zip destfile="${folder.dist}/${release}-src.zip" level="9">
            <fileset dir="${folder.dist}" includes="${release}-src/**"/>
        </zip>
        <checksum file="${folder.dist}/${release}-src.zip" algorithm="md5"/>
        <checksum file="${folder.dist}/${release}-src.zip" algorithm="sha"/>

        <!-- Create .tar.gz archive -->
        <tar destfile="${folder.dist}/${release}-src.tar" longfile="gnu">
            <fileset dir="${folder.dist}" includes="${release}-src/**"/>
        </tar>
        <gzip src="${folder.dist}/${release}-src.tar"
            destfile="${folder.dist}/${release}-src.tar.gz"/>
        <delete file="${folder.dist}/${release}-src.tar"/>
        <checksum file="${folder.dist}/${release}-src.tar.gz" algorithm="md5"/>
        <checksum file="${folder.dist}/${release}-src.tar.gz" algorithm="sha"/>
    </target>

    <!-- Package binary distribution -->
    <target name="install" description="Generates binary release in ${folder.install}"
        depends="clean, package, doc, deploy">
        <mkdir dir="${folder.install}/${release}/lib"/>
        <mkdir dir="${folder.install}/${release}/doc"/>
        <mkdir dir="${folder.install}/${release}/webapps"/>

        <!-- Copy base files to the install folder -->
        <copy todir="${folder.install}/${release}">
            <fileset dir="${basedir}">
                <include name="LICENSE"/>
                <include name="NOTICE"/>
                <include name="README"/>
                <include name="RELEASE-NOTES"/>
            </fileset>
        </copy>

        <!-- Copy release binaries -->
        <copy todir="${folder.install}/${release}/lib">
            <fileset dir="${folder.lib}">
                <include name="${jar.charts}"/>
                <include name="${jar.core}"/>
                <include name="${jar.tools}"/>
                <include name="${jar.web}"/>
                <include name="${jar.web-server}"/>
                <include name="${jar.wtk}"/>
                <include name="${jar.wtk-terra}"/>
            </fileset>
        </copy>

        <!-- Copy documentation -->
        <copy todir="${folder.install}/${release}/doc">
            <fileset dir="${folder.doc}"/>
        </copy>

        <!-- Copy webapps -->
        <copy todir="${folder.install}/${release}/webapps">
            <fileset dir="${folder.lib}">
                <include name="${ant.project.name}-demos.war"/>
                <include name="${ant.project.name}-tutorials.war"/>
            </fileset>
        </copy>

        <!-- Create .zip archive -->
        <zip destfile="${folder.install}/${release}.zip" level="9">
            <fileset dir="${folder.install}" includes="${release}/**"/>
        </zip>
        <checksum file="${folder.install}/${release}.zip" algorithm="md5"/>
        <checksum file="${folder.install}/${release}.zip" algorithm="sha"/>

        <!-- Create .tar.gz archive -->
        <tar destfile="${folder.install}/${release}.tar" longfile="gnu">
            <fileset dir="${folder.install}" includes="${release}/**"/>
        </tar>
        <gzip src="${folder.install}/${release}.tar" destfile="${folder.install}/${release}.tar.gz"/>
        <delete file="${folder.install}/${release}.tar"/>
        <checksum file="${folder.install}/${release}.tar.gz" algorithm="md5"/>
        <checksum file="${folder.install}/${release}.tar.gz" algorithm="sha"/>
    </target>

    <!-- Generate deployment files -->
    <target name="deploy" depends="clean, package">
        <!-- Sign JARS -->
        <mkdir dir="${folder.lib}/signed"/>
        <copy todir="${folder.lib}/signed">
            <fileset dir="${folder.lib}">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <signjar keystore="${keystore.location}" storepass="${keystore.passwd}"
            alias="${keystore.alias}" preservelastmodified="true" lazy="true">
            <path>
                <fileset dir="${folder.lib}/signed" includes="*.jar" />
            </path>
        </signjar>

        <copy todir="${folder.lib}">
            <fileset dir="${folder.lib}/signed" includes="*.jar" />
            <mapper type="glob" from="*.jar" to="*.signed.jar"/>
        </copy>

        <delete dir="${folder.lib}/signed"/>

        <!-- Define filters for processing HTML files -->
        <filter token="project_name" value="${ant.project.name}"/>
        <filter token="version" value="${version}"/>

        <!-- Deploy demos -->
        <mkdir dir="demos/${folder.deploy}/lib"/>
        <copy todir="demos/${folder.deploy}/lib">
            <fileset dir="${folder.lib}">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <!-- Transform demos index -->
        <xslt basedir="demos/www"
            destdir="demos/${folder.deploy}"
            extension=".html"
            style="demos/xsl/index.xsl"
            includes="index.xml"/>

        <!-- Transform demos html -->
        <xslt basedir="demos/www"
            destdir="demos/${folder.deploy}"
            extension=".html"
            style="demos/xsl/demo.html.xsl"
            includes="*.xml"
            excludes="index.xml">
            <param name="release" expression="${version}"/>
            <param name="root" expression="${ant.project.name}-demos"/>
        </xslt>

        <!-- Transform demos jnlp -->
        <xslt basedir="demos/www"
            destdir="demos/${folder.deploy}"
            extension=".jnlp"
            style="demos/xsl/demo.jnlp.xsl"
            includes="*.xml"
            excludes="index.xml">
            <param name="release" expression="${version}"/>
        </xslt>

        <!-- Copy static demo files to deploy folder -->
        <copy todir="demos/${folder.deploy}">
            <fileset dir="demos/www" excludes="**/*.xml"/>
        </copy>

        <!-- Generate demos WAR -->
        <war destfile="${folder.lib}/${ant.project.name}-demos.war" webxml="demos/web.xml">
            <fileset dir="demos/${folder.deploy}"/>
        </war>

        <!-- Deploy tutorials -->
        <mkdir dir="tutorials/www/lib"/>
        <copy todir="tutorials/www/lib">
            <fileset dir="${folder.lib}">
                <include name="*.jar"/>
                <exclude name="*-demos*.jar"/>
                <exclude name="*.server.jar"/>
            </fileset>
        </copy>

        <!-- Generate tutorials version templates -->
        <copy todir="tutorials/www" filtering="true">
            <fileset dir="tutorials/www">
                <include name="version.template.jsp"/>
            </fileset>
            <mapper type="glob" from="version.template.jsp" to="version.jsp"/>
        </copy>

        <copy todir="tutorials/www" filtering="true">
            <fileset dir="tutorials/www">
                <include name="version.template.js"/>
            </fileset>
            <mapper type="glob" from="version.template.js" to="version.js"/>
        </copy>

        <!-- Generate tutorials WAR -->
        <war destfile="${folder.lib}/${ant.project.name}-tutorials.war" webxml="tutorials/web.xml">
            <fileset dir="tutorials/www">
                <exclude name="version.template.js"/>
                <exclude name="version.template.jsp"/>
            </fileset>
        </war>
    </target>

    <!-- Remove trailing white space in all source files -->
    <target name="trim-whitespace">
        <fileset id="trimfiles" dir=".">
            <include name="BUILD"/>
            <include name="LICENSE"/>
            <include name="NOTICE"/>
            <include name="README"/>
            <include name="RELEASE-NOTES"/>
            <include name="**/*.java"/>
            <include name="**/*.html"/>
            <include name="**/*.jsp"/>
            <include name="**/*.txt"/>
            <include name="**/*.properties"/>
            <include name="**/*.xml"/>
            <include name="**/*.wtkx"/>
            <include name="**/*.wtkd"/>
            <include name="**/*.json"/>
        </fileset>
        <replaceregexp match="[\t]" replace="    " flags="gm" byline="true">
            <fileset refid="trimfiles"/>
        </replaceregexp>
        <replaceregexp match="[\t ]+$" replace="" flags="gm" byline="true">
            <fileset refid="trimfiles"/>
        </replaceregexp>
    </target>
</project>
