<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License,
Version 2.0 (the "License"); you may not use this file except in
compliance with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<Window bxml:id="window"
    title="JavaScript Console Test" maximized="true"
    xmlns:bxml="http://pivot.apache.org/bxml"
    xmlns="org.apache.pivot.wtk"
>
    <bxml:script src="javascript_console_test.js"/>

    <bxml:script>
    <![CDATA[
    // note that this script could be moved in an external js file, like that already included in this file ...
    log("inline script 1 - start");

    // JS variables for (remote) resources
    // needed for test 2 and 4
    var baseURL  = "http://pivot.apache.org/assets-for-tests";
    var frameURL = baseURL + "/frame.bxml";
    // note that bxml files must have the MIME Type "application/bxml" (as requested by BXMLSerializer),
    // or (BXMLSerializer) will try to get it from its file extension ...

    log("inline script 1 - end");
    ]]>
    </bxml:script>

    <bxml:define>
        <!-- temp, then keep these definitions commented, do NOT removed them from here //-->
        <bxml:include bxml:id="testLocalFrame"  src="script_application_test.frame.bxml"/>

        <!--
        // test 1, ok
        // load the bxml file from a fixed URL
        // note that the bxml file will be loaded when this bxml file is loaded, so at application startup time, slowing it ...
        <bxml:include bxml:id="testRemoteFrame" src="http://pivot.apache.org/assets-for-tests/frame.bxml"/>

        // test 2, ok
        // load the bxml file from a URL set in a JS variable, feature just added
        // note that the bxml file will be loaded when this bxml file is loaded, so at application startup time, slowing it ...
        <bxml:include bxml:id="testRemoteFrame" src="$frameURL"/>

        // test 3, no, it's not possible
        // try to set src later in JS ...
        // <bxml:include bxml:id="testRemoteFrame" src=""/>
        // <bxml:include bxml:id="testRemoteFrame"/>
        //-->
    </bxml:define>

    <bxml:script>
    <![CDATA[
    // note that this script could be moved in an external js file, like that already included in this file ...
    importPackage(org.apache.pivot.beans);  // for BXMLSerializer
    importPackage(org.apache.pivot.util);
    importPackage(org.apache.pivot.wtk);

    log("inline script 2 - start");

    // test 4, ok
    // define the variable in JS, and load it by instancing Java classes from here
    // log("frameURL is \"" + frameURL + "\"");  // show that the required value is already defined
    log("application is " + application);  // reference to the application itself, set in main class, in Java Code

    // JS variables for (remote) resources
    var bxmlSerializer = new BXMLSerializer();  // trick, I hope a good one ...
    log("bxmlSerializer is " + bxmlSerializer);
    // load the window/frame, but using an utility method defined in the application ...
    log("load the window/frame now, by JS code (calling Java code from the application) ...");
    var loadedWindow = application.loadWindowFromURL(frameURL, bxmlSerializer);
    log("loadedWindow is " + loadedWindow + ", and its JavaScript typeof here is " + typeof loadedWindow);  // note that typeof loadedWindow is object

    var testRemoteFrame = loadedWindow;
    // log formatted info but using a static method defined in the application, just for test ...
    // note that this call is done in the usual (non-static) way, and works the same even from here
    application.logObject(testRemoteFrame);


    // test 5, TODO
    // isolate a JS snippet (but self-contained) derive from test 4, and
    // find a way to execute it as the text written in the textArea in a JS interpreter,
    // then put it in a fixed template, and generalize it inside this test/sample application ...

    log("inline script 2 - end");
    ]]>
    </bxml:script>

    <TablePane styles="{padding:6, horizontalSpacing:6, verticalSpacing:8}">
        <columns>
            <TablePane.Column width="100"/>
            <TablePane.Column width="1*"/>
            <TablePane.Column width="50"/>
        </columns>

        <TablePane.Row height="-1">
            <BoxPane orientation="horizontal" TablePane.columnSpan="3">
                <Label styles="{horizontalAlignment:'center', verticalAlignment:'center'}" text="JavaScript (interpreted by the JVM) Console:"
                />
                <Label text=" " />

                <Label text="Templates:"/>
                <ListButton bxml:id="templateButton"
                    listData="['Choose a template', 'Open Frame Local', 'Open Frame Remote (from Pivot Web Site)']"
                    selectedIndex="-1"
                >
                    <listButtonSelectionListeners>
                        function selectedIndexChanged(listButton, previousSelectedIndex) {
                            var selectedIndex = listButton.selectedIndex;
                            // log("Previous Selection was " + previousSelectedIndex + ", now Selected " + selectedIndex);

                            var templateText = "";
                            // simple logic to set template text, just for sample
                            switch(selectedIndex) {
                                // case 0:  // handle with default ...
                                case 1:
// TODO: put the right text to run in console ...
                                    templateText = "testLocalFrame.open(window);";
                                    testLocalFrame.open(window);  // temp, then keep this commented
                                    break;
                                case 2:
// TODO: put the right text to run in console ...
                                    templateText = "testRemoteFrame.open(window);";
                                    // note that testRemoteFrame is already loaded, so here it's only to display it ...
                                    testRemoteFrame.open(window);  // temp, then keep this commented
                                    break;
                                default:
                                    clearConsole();
                                    break;
                            }
                            textArea.text = templateText;
                        }
                    </listButtonSelectionListeners>
                </ListButton>
                <Label text=" " />

                <PushButton bxml:id="runButton"   buttonData="Run" ButtonPressListener.buttonPressed="runConsole()"/>
                <PushButton bxml:id="clearButton" buttonData="Clear">
                    <buttonPressListeners>
                    function buttonPressed(button) {
                        clearConsole();
                    }
                    </buttonPressListeners>
                </PushButton>
            </BoxPane>
        </TablePane.Row>
        <TablePane.Row height="1*">
            <Label styles="{horizontalAlignment:'right', verticalAlignment:'center'}" text="JS Source:"/>
            <Border>
                <ScrollPane horizontalScrollBarPolicy="fill" verticalScrollBarPolicy="fill_to_capacity"
                    preferredHeight="200"
                >
                    <TextArea bxml:id="textArea"
                        styles="{wrapText:false}"
                        editable="true"
                        text=""
                    >
                       <textAreaContentListeners>
                        function textChanged(textArea) {
                            var numChars = textArea.characterCount;
                            // log("numChars = " + numChars);
                            if (numChars > 0) {
                                // runButton.enabled = true;  // ok
                                runButton.setEnabled(true);   // explicit usage of the setter
                            }
                        }
                        </textAreaContentListeners>
                    </TextArea>
                </ScrollPane>
            </Border>
        </TablePane.Row>
        <TablePane.Row height="-1">
            <Label styles="{horizontalAlignment:'right', verticalAlignment:'center'}" text="Status:"/>
            <Label bxml:id="textStatus" styles="{horizontalAlignment:'left', verticalAlignment:'center'}" text=""/>
        </TablePane.Row>
    </TablePane>

</Window>
