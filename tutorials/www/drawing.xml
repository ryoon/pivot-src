<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License,
Version 2.0 (the "License"); you may not use this file except in
compliance with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<document id="drawing">
    <properties>
        <title>Drawing</title>
    </properties>

    <body>
        <p>
            While most of Pivot's user interface features are rendered using immediate-mode Java2D
            calls during a <tt>paint()</tt> operation, Pivot also supports a retained mode drawing
            API (sometimes called a "scene graph"). This API allows a caller to construct a drawing
            programmatically by assembling a shape hierarchy, similar to the component hierarchy
            used to construct a user interface.
        </p>

        <p>
            For example, the following simple drawing was constructed using three <tt>Ellipse</tt>
            shapes and an <tt>Arc</tt>:
        </p>

        <application class="org.apache.pivot.wtk.ScriptApplication"
            width="260" height="260">
            <libraries>
                <library>core</library>
                <library>wtk</library>
                <library>wtk-terra</library>
                <library>tutorials</library>
            </libraries>
            <startup-properties>
                <src>org/apache/pivot/tutorials/drawing/simple_drawing.wtkx</src>
            </startup-properties>
        </application>

        <p>
            The WTKX source for the drawing is as follows:
        </p>

        <source type="xml" location="org/apache/pivot/tutorials/drawing/simple_drawing.wtkx">
            <![CDATA[
            <Window title="Simple Drawing" maximized="true"
                xmlns:wtkx="http://pivot.apache.org/wtkx"
                xmlns:media="org.apache.pivot.wtk.media"
                xmlns="org.apache.pivot.wtk">
                <content>
                    <ImageView>
                        <image>
                            <media:Drawing>
                                <canvas>
                                    <Canvas xmlns="org.apache.pivot.wtk.media.drawing">
                                        <Ellipse x="0" y="0" width="240" height="240" stroke="" fill="#ffff00"/>
                                        <Ellipse x="70" y="60" width="30" height="40" fill="#000000"/>
                                        <Ellipse x="140" y="60" width="30" height="40" fill="#000000"/>
                                        <Arc x="60" y="120" width="120" height="70"
                                            start="190" extent="160" type="open" strokeThickness="8"/>
                                    </Canvas>
                                </canvas>
                            </media:Drawing>
                        </image>
                    </ImageView>
                </content>
            </Window>
            ]]>
        </source>

        <p>
            Drawings can be modified programmatically at regular intervals to create animations.
            For example, the following application simulates the second hand of a clock:
        </p>

        <application class="org.apache.pivot.tutorials.drawing.RotateLine"
            width="360" height="360">
            <libraries>
                <library>core</library>
                <library>wtk</library>
                <library>wtk-terra</library>
                <library>tutorials</library>
            </libraries>
        </application>

        <p>
            The following WTKX creates the initial shape:
        </p>

        <source type="xml" location="org/apache/pivot/tutorials/drawing/rotate_line.wtkd">
            <![CDATA[
            <Drawing xmlns:wtkx="http://pivot.apache.org/wtkx"
                xmlns="org.apache.pivot.wtk.media">
                <canvas>
                    <Canvas xmlns="org.apache.pivot.wtk.media.drawing">
                        <Ellipse width="320" height="320" stroke="" fill="#eeeeee"/>
                        <Line x1="0" y1="0" x2="0" y2="-160" strokeThickness="4">
                            <transforms>
                                <Shape.Translate x="160" y="160"/>
                                <Shape.Rotate wtkx:id="rotation"/>
                            </transforms>
                        </Line>
                    </Canvas>
                </canvas>
            </Drawing>
            ]]>
        </source>

        <p>
            Then, this Java code is used to alter the line's rotation every 1000 milliseconds:
        </p>

        <source type="java" location="org/apache/pivot/tutorials/drawing/RotateLine.java">
            <![CDATA[
            package org.apache.pivot.tutorials.drawing;

            import org.apache.pivot.collections.Map;
            import org.apache.pivot.wtk.Application;
            import org.apache.pivot.wtk.ApplicationContext;
            import org.apache.pivot.wtk.DesktopApplicationContext;
            import org.apache.pivot.wtk.Display;
            import org.apache.pivot.wtk.ImageView;
            import org.apache.pivot.wtk.Window;
            import org.apache.pivot.wtk.media.Drawing;
            import org.apache.pivot.wtk.media.drawing.Shape;
            import org.apache.pivot.wtkx.WTKXSerializer;

            public class RotateLine implements Application {
                private Drawing drawing = null;
                private Shape.Rotate rotation = null;

                private Window window = null;

                @Override
                public void startup(Display display, Map<String, String> properties)
                    throws Exception{
                    WTKXSerializer wtkxSerializer = new WTKXSerializer();
                    drawing = (Drawing)wtkxSerializer.readObject(this, "rotate_line.wtkd");
                    rotation = (Shape.Rotate)wtkxSerializer.get("rotation");

                    ApplicationContext.scheduleRecurringCallback(new Runnable() {
                        @Override
                        public void run() {
                            int angle = (int)rotation.getAngle();
                            angle = (angle + 6) % 360;
                            rotation.setAngle(angle);
                        }
                    }, 1000);

                    window = new Window(new ImageView(drawing));
                    window.setMaximized(true);
                    window.open(display);
                }

                @Override
                public boolean shutdown(boolean optional) {
                    if (window != null) {
                        window.close();
                    }

                    return false;
                }

                @Override
                public void suspend() {
                }

                @Override
                public void resume() {
                }

                public static void main(String[] args) {
                    DesktopApplicationContext.main(RotateLine.class, args);
                }
            }
            ]]>
        </source>
    </body>
</document>
