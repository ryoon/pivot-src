<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License,
Version 2.0 (the "License"); you may not use this file except in
compliance with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<document id="hello-wtkx">
    <properties>
        <title>Hello, WTKX!</title>
    </properties>

    <body>
        <p>
            Below is the output of the "hello world" application written using WTKX. Note that,
            with the exception of the actual text, it is identical to the output of the Java
            version:
        </p>

        <application class="org.apache.pivot.tutorials.HelloWTKX"
            width="240" height="80">
            <libraries>
                <library>core</library>
                <library>wtk</library>
                <library>wtk-terra</library>
                <library>tutorials</library>
            </libraries>
        </application>

        <p>
            The following is the Java source code for the WTKX version. The content of the user
            interface is defined entirely by the WTKX source file. It is loaded using an instance
            of the <tt>WTKXSerializer</tt> class defined in the <tt>org.apache.pivot.wtkx</tt>
            package.
        </p>

        <source type="java" location="org/apache/pivot/tutorials/HelloWTKX.java">
            <![CDATA[
            package org.apache.pivot.tutorials;

            import org.apache.pivot.collections.Map;
            import org.apache.pivot.wtk.Application;
            import org.apache.pivot.wtk.DesktopApplicationContext;
            import org.apache.pivot.wtk.Display;
            import org.apache.pivot.wtk.Window;
            import org.apache.pivot.wtkx.WTKXSerializer;

            public class HelloWTKX implements Application {
                private Window window = null;

                @Override
                public void startup(Display display, Map<String, String> properties)
                    throws Exception {
                    WTKXSerializer wtkxSerializer = new WTKXSerializer();
                    window = (Window)wtkxSerializer.readObject(this, "hello.wtkx");
                    window.open(display);
                }

                @Override
                public boolean shutdown(boolean optional) {
                    if (window != null) {
                        window.close();
                    }

                    return false;
                }

                @Override
                public void suspend() {
                }

                @Override
                public void resume() {
                }

                public static void main(String[] args) {
                    DesktopApplicationContext.main(HelloWTKX.class, args);
                }
            }            ]]>
        </source>

        <p>
            The WTKX that is used to create the UI is shown below:
        </p>

        <source type="xml" location="org/apache/pivot/tutorials/hello.wtkx">
            <![CDATA[
            <Window title="Hello WTKX!" maximized="true"
                xmlns:wtkx="http://pivot.apache.org/wtkx"
                xmlns="org.apache.pivot.wtk">
                <content>
                    <Label text="Hello WTKX!"
                        styles="{font:'Arial bold 24', color:'#ff0000',
                            horizontalAlignment:'center', verticalAlignment:'center'}"/>
                </content>
            </Window>
            ]]>
        </source>

        <p>
            Most Pivot applications will be constructed this way, declaring the structure of the
            UI in WTKX rather than creating it programmatically in code. However, event handlers,
            which allow an application to respond to user input, are always defined in code (either
            Java or a compatible JVM scripting language). For example, the following WTKX produces
            output very similar to the previous two versions, using a combination of WTKX and
            JavaScript:
        </p>

        <source type="xml" location="org/apache/pivot/tutorials/hello_javascript.wtkx">
            <![CDATA[
            <Window title="Hello JavaScript!" maximized="true"
                xmlns:wtkx="http://pivot.apache.org/wtkx"
                xmlns="org.apache.pivot.wtk">
                <windowStateListeners>
                    <wtkx:script>
                    importPackage(org.apache.pivot.wtk);

                    function windowOpened(window) {
                        var label = new Label();
                        label.setText("Hello JavaScript!");
                        label.getStyles().put("font", "Arial BOLD 24");
                        label.getStyles().put("color", "#ff0000");
                        label.getStyles().put("horizontalAlignment", HorizontalAlignment.CENTER);
                        label.getStyles().put("verticalAlignment", VerticalAlignment.CENTER);

                        window.setContent(label);
                    }
                    </wtkx:script>
                </windowStateListeners>
            </Window>
            ]]>
        </source>

        <p>
            The actual output is shown below:
        </p>

        <application class="org.apache.pivot.tutorials.HelloJavaScript"
            width="240" height="80">
            <libraries>
                <library>core</library>
                <library>wtk</library>
                <library>wtk-terra</library>
                <library>tutorials</library>
            </libraries>
        </application>

        <p>
            Though many of the examples in this tutorial implement event handlers in Java, some use
            script code when it is more concise or convenient to do so. Scripting is discussed in
            more detail in the <a href="scripting.html">Scripting</a> section.
        </p>
    </body>
</document>
