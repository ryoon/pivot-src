<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License,
Version 2.0 (the "License"); you may not use this file except in
compliance with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<document id="stock-tracker.data-binding">
    <properties>
        <title>Data Binding</title>
    </properties>

    <body>
        <p>
            Data binding is the process of automatically mapping values between a set of user
            interface elements and an internal data representation; for example, from a order entry
            form to a collection of database fields or vice versa. Data binding can help simplify
            development by eliminating some or all of the tedious boilerplate code that often goes
            along with this type of programming.
        </p>

        <p>
            In Pivot, data binding is controlled by the <tt>load()</tt> and <tt>store()</tt>
            methods of the <tt>Component</tt> class:
        </p>

        <p>
            <tt>public void load(Dictionary&lt;String, Object&gt; context) {...}</tt><br/>
            <tt>public void store(Dictionary&lt;String, Object&gt; context) {...}</tt><br/>
        </p>

        <p>
            The <tt>Dictionary</tt> argument passed to these methods provides the "bind context":
            a collection of name/value pairs representing the data to which the components are
            bound. Each bindable property of a component can be assigned a "bind key" that
            associates the property with a value in the context. Data is imported from the context
            into the property during a load, and exported from the property to the context during
            a store.
        </p>

        <p>
            Many component support data binding including text inputs, checkboxes and radio buttons,
            list views, and table views, among others. Some components support binding to multiple
            properties; for example, a caller can bind to both the list data as well as the selection
            state of a <tt>ListView</tt> component.
        </p>

        <p>
            It is important to note that it is not possible to directly bind to a container
            component. However, containers may act as nested bind contexts - when a bind key is
            assigned to a container, it is assumed to point to a nested <tt>Dictionary</tt> instance
            representing a subordinate bind context. This enables complex object graphs returned
            from a web query to be seamlessly mapped to a set of data-bound components arranged in a
            non-trivial layout, for example.
        </p>

        <h2>Data Binding in Stock Tracker</h2>

        <p>
            The Stock Tracker demo isn't quite that sophisticated. It uses a single, flat bind
            context to populate the fields in the quote detail view. The bind context is actually
            the row data retrieved from the web query for the selected stock. This is why the
            application requests more data than it seems to need from the GET query: the extra
            fields are used to fill in the data in the detail form.
        </p>

        <p>
            The bound components, in this case, are labels - Stock Tracker maps values from the
            retrieved quote data to the text property of each. The name of the key to use for each
            label is specified via the "textKey" property:
        </p>

        <source type="xml">
            <![CDATA[
            <Form styles="{padding:0, fill:true, showFlagIcons:false, showFlagHighlight:false,
                leftAlignLabels:true}">
                <sections>
                    <Form.Section>
                        <wtkx:define>
                            <stocktracker:ValueMapping wtkx:id="valueMapping"/>
                            <stocktracker:ChangeMapping wtkx:id="changeMapping"/>
                            <stocktracker:VolumeMapping wtkx:id="volumeMapping"/>
                        </wtkx:define>

                        <Label wtkx:id="valueLabel" Form.label="%value"
                            textKey="value" textBindMapping="$valueMapping"
                            styles="{horizontalAlignment:'right'}"/>
                        <Label wtkx:id="changeLabel" Form.label="%change"
                            textKey="change" textBindMapping="$valueMapping"
                            styles="{horizontalAlignment:'right'}"/>
                        <Label wtkx:id="openingValueLabel" Form.label="%openingValue"
                            textKey="openingValue" textBindMapping="$valueMapping"
                            styles="{horizontalAlignment:'right'}"/>
                        <Label wtkx:id="highValueLabel" Form.label="%highValue"
                            textKey="highValue" textBindMapping="$valueMapping"
                            styles="{horizontalAlignment:'right'}"/>
                        <Label wtkx:id="lowValueLabel" Form.label="%lowValue"
                            textKey="lowValue" textBindMapping="$changeMapping"
                            styles="{horizontalAlignment:'right'}"/>
                        <Label wtkx:id="volumeLabel" Form.label="%volume"
                            textKey="volume" textBindMapping="$volumeMapping"
                            styles="{horizontalAlignment:'right'}"/>
                    </Form.Section>
                </sections>
            </Form>
            ]]>
        </source>

        <p>
            The actual binding occurs when the selection changes in the table view; the selection
            change handler calls the <tt>refreshDetail()</tt> method in response to a selection
            change event:
        </p>

        <source type="java">
            <![CDATA[
            @SuppressWarnings("unchecked")
            private void refreshDetail() {
                StockQuote stockQuote = null;

                int firstSelectedIndex = stocksTableView.getFirstSelectedIndex();
                if (firstSelectedIndex != -1) {
                    int lastSelectedIndex = stocksTableView.getLastSelectedIndex();

                    if (firstSelectedIndex == lastSelectedIndex) {
                        List<StockQuote> tableData = (List<StockQuote>)stocksTableView.getTableData();
                        stockQuote = tableData.get(firstSelectedIndex);
                    } else {
                        stockQuote = new StockQuote();
                    }
                } else {
                    stockQuote = new StockQuote();
                }

                detailPane.load(new BeanDictionary(stockQuote));
            }
            ]]>
        </source>

        <p>
            Note that the <tt>load()</tt> method is actually called on the detail pane itself
            rather than on the parent container of the detail labels (an instance of <tt>Form</tt>).
            This is because the application also needs to bind to the label that contains the
            company name, which is not a child of the <tt>Form</tt>.
        <p>

        <source type="xml">
            <![CDATA[
            <Label textKey="companyName" styles="{font:{size:12, bold:true}}"/>
            ]]>
        </source>

        </p>
            This example demostrates that a nested container does not automatically imply the
            existence of a sub-context - sub-contexts are created only when a nested container is
            assigned its own bind key. Because a bind key is not defined for it, the form simply
            inherits the bind context that was passed to its parent, the root
            <tt>&lt;BoxPane&gt;</tt> representing the detail pane.
        </p>

        <h2>Bind Mappings</h2>

        <p>
            Also note the use of the "textBindMapping" attributes. Bind mappings allow a caller
            to modify the data during the bind process. Incoming data can be converted before it
            is assigned to a property, and outgoing data can be converted before it is stored in
            the bind context. For example, the <tt>ValueMapping</tt> class formats incoming data
            as a currency value in U.S. dollars:
        </p>

        <source type="java">
            <![CDATA[
            public class ValueMapping implements Label.TextBindMapping {
                private static final DecimalFormat FORMAT = new DecimalFormat("$0.00");

                @Override
                public String toString(Object value) {
                    return Float.isNaN((Float)value) ? null : FORMAT.format(value);
                }

                @Override
                public Object valueOf(String text) {
                    throw new UnsupportedOperationException();
                }
            }
            ]]>
        </source>

        <p>
            The <tt>toString() method is called to perform the translation during a <tt>load()</tt>
            operation</tt>. The <tt>valueOf()</tt> method would be called during <tt>store()</tt>,
            but throws <tt>UnsupportedOperationException</tt> because <tt>store()</tt> is never
            called by the Stock Tracker application.
        </p>
    </body>
</document>
