<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License,
Version 2.0 (the "License"); you may not use this file except in
compliance with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<document id="stock-tracker.ui">
    <properties>
        <title>UI Markup Using WTKX</title>
    </properties>

    <body>
        <p>
            The user interface of a Pivot application is often defined using XML markup rather than
            Java code. The hierarchical structure of an XML document more closely parallels the
            structure of the component hierarchy, which makes it easier to visualize the resulting
            output.
        </p>

        <p>
            Pivot allows developers to split the definition of the user interface into multiple
            WTKX files. This allows each piece to vary independently and makes the overall
            structure easier to manage. The layout of the Stock Tracker application is divided into
            two WTKX documents; <tt>stocktracker.wtkx</tt>, which sets up the main structure of the
            application, and <tt>stocktracker.detail.wtkx</tt>, which defines the layout for the
            quote detail. We'll take a look at the top-level markup in
            <tt>stocktracker.wtkx first</tt>, concentrating on the main page elements,
            <tt>TablePane</tt>, <tt>SplitPane</tt>, and <tt>TableView</tt>. Then we'll investigate
            the markup for the stock quote detail, which uses the <tt>Form</tt> container and lays
            the ground work for the data binding support we'll discuss in a later section.
        </p>

        <h2>TablePane</h2>

        <p>
            The root node of <tt>stocktracker.wtkx</tt> is a <tt>TablePane</tt> element. A table
            pane is a type of layout container that arranges its children in a manner similar to
            an HTML table.
        </p>

        <p>
            Like HTML tables, <tt>TablePane</tt> contents are organized into rows and columns.
            Unlike HTML, however, which may attempt to infer a table structure from its contents,
            a table pane's structure must be explicitly defined, as shown below:
        </p>

        <source type="xml">
            <![CDATA[
            <TablePane styles="{padding:8, horizontalSpacing:6, verticalSpacing:6}">
                <columns>
                    <TablePane.Column width="1*" />
                </columns>

                <rows>
                    <TablePane.Row height="-1">
                        <Label ... />
                    </TablePane.Row>

                    <TablePane.Row height="1*">
                        <SplitPane splitRatio="0.4">
                        ...
                        </SplitPane>
                    </TablePane.Row>

                    <TablePane.Row height="-1">
                        <BoxPane ... >
                        ...
                        </BoxPane>
                    </TablePane.Row>

                    <TablePane.Row height="-1">
                        <TablePane>
                        ...
                        </TablePane>
                    </TablePane.Row>
                </rows>
            </TablePane>
            ]]>
        </source>

        <p>
            <tt>TablePane</tt> row heights and column widths can be specified as either automatic,
            absolute, or relative:
        </p>

        <ul>
            <li><p>A value of -1 specifies an automatic size; the table pane will determine the
            height of the row as the maximum preferred height of all components in that row; the
            same applies to automatic column widths.</p></li>
            <li><p>An explicit, non-negative value defines an absolute width or height, specified
            in pixels.</p></li>
            <li><p>A number followed by an asterisk specifies a relative size; the width or height
            is determined by applying a weighted percentage of the space left over after
            subtracting the width or height of all automatic and absolute columns and rows (which
            may be 0).</p></li>
        </ul>

        <p>
            In the example above, the single column will be given 100% of the width allocated to
            the <tt>TablePane</tt>. The heights of rows 1, 3, and 4 will be determined
            automatically based on the preferred heights of their contents, and the second row
            will be given 100% of the vertical space left over after the other rows are accounted
            for.
        </p>

        <p>
            The following graphic shows the resulting layout (the blue lines represent the table
            cell boundaries):
        </p>

        <p>
            <img src="stock_tracker/table_pane.png"/>
        </p>
        <p class="caption">Stock Tracker table pane cells.</p>

        <h3>Styles</h3>

        <p>
            Note the styles attribute of the <tt>TablePane</tt> element. Styles are used to
            customize the appearance of a component, and are specified in WTKX as a JSON-formatted
            collection of name/value pairs. All WTKX elements support the styles attribute, but
            each element may support a different set of styles depending on its current skin.
        </p>

        <p>
            In this example, the table pane is assigned a "padding" value of 8 and a
            "horizontalSpacing" value of 6. Padding represents the amount of space that the table
            pane will leave around its components, and horizontal spacing is the size of the gap
            the table pane will leave between columns.
        </p>

        <h3>Table Pane Cells</h3>

        <p>
            The actual content of a table pane is specified in the <tt>&lt;rows&gt;</tt> element.
            Each immediate child element of the <tt>&lt;rows&gt;</tt> element is an element
            representing a complete row; each child of the <tt>&lt;TablePane.Row&gt;</tt> element
            is considered a table cell, as shown below:
        </p>

        <source type="xml">
            <![CDATA[
            <TablePane.Row height="-1">
                <Label text="%stockTracker"
                    styles="{font:'Verdana bold 14', verticalAlignment:'center'}"/>
            </TablePane.Row>
            ]]>
        </source>

        <p>
            Note the use of the percent symbol in the text attribute value. This tells the WTKX
            component loader that the value of the label's text property should be provided by a
            string resource with the specified name, minus the percent sign. This is discussed in
            more detail in the Localization section.
        </p>

        <h2>SplitPane</h2>

        <p>
            The <tt>SplitPane</tt> container is used to divide an area into two resizable regions.
            Split panes can be either vertical or horizontal (the default). Vertical split panes
            contain top and bottom components, and horizontal split panes contain left and right
            components, as shown below:
        </p>

        <source type="xml">
            <![CDATA[
            <SplitPane splitRatio="0.4">
                <left>
                    <Border styles="{padding:0, color:10}">
                    ...
                    </Border>
                </left>
                <right>
                    <Border styles="{padding:6, color:10}">
                    ...
                    </Border>
                </right>
            </SplitPane>
            ]]>
        </source>

        <p>
            In this example, both the left and right components are instances of the
            <tt>Border</tt> class.  Since split panes themselves don't draw any kind of divider,
            borders are often used to delineate content boundaries. Given a split ratio value of
            0.4, as shown, the left side of the split pane will initially be allocated 40% of the
            split pane's width, and the right side will receive 60%.
        </p>

        <h2>TableView</h2>

        <p>
            The <tt>TableView</tt> component is used to present tabular data in a grid of rows and
            columns. While it bears a superficial resemblance to <tt>TablePane</tt>, the purpose
            of the two components is quite different: <tt>TablePane</tt> is a container; its
            primary purpose is to lay out sub-components, and its structure is most often defined
            at design time. <tt>TableView</tt> is a component that acts as a view on a set of
            model data and is most often populated at run time.
        </p>

        <p>
            Like <tt>TablePane</tt>, <tt>TableView</tt>'s columns must be defined up front.
            However, since the contents of a table view are generally not known until run time, it
            is not necessary to define a table view's row structure - this is provided by the
            table view's model data when the table view is populated.
        </p>

        <p>
            <tt>TableView</tt> is used by the Stock Tracker demo to display a selectable list of
            stock quote data. The following listing shows the markup used by the demo to create
            the table view:
        </p>

        <source type="xml">
            <![CDATA[
            <TableView wtkx:id="stocksTableView" selectMode="multi"
                styles="{showHorizontalGridLines:false}">
                <columns>
                    <TableView.Column name="symbol" headerData="%symbol" width="80"/>
                    <TableView.Column name="value" headerData="%value" width="80">
                        <cellRenderer>
                            <content:TableViewNumberCellRenderer
                                styles="{horizontalAlignment:'right'}"
                                numberFormat="$$0.00"/>
                        </cellRenderer>
                    </TableView.Column>
                    <TableView.Column name="change" headerData="%change" width="80">
                        <cellRenderer>
                            <stocktracker:ChangeCellRenderer
                                styles="{horizontalAlignment:'right'}"
                                numberFormat="+0.00;-0.00"/>
                        </cellRenderer>
                    </TableView.Column>
                </columns>
            </TableView>
            ]]>
        </source>

        <p>
            Note that the <tt>TableView</tt> element includes a <tt>wtkx:id</tt> attribute value
            with a value of "stocksTableView". This is used to associate the table view with an
            instance of <tt>TableViewHeader</tt>, which is discussed in the next section. ID values
            are also used to gain access to WTKX components from Java code when wiring up event
            handlers. This is discussed in more detail in the
            <a href="stock-tracker.events.html">Event Handling</a> section.
        </p>

        <p>
            Setting the <tt>selectMode</tt> attribute to "multi" specifies that a user may select
            multiple rows in this table view. Other possible values for <tt>selectMode</tt> are
            "single" and "none". Setting <tt>showHorizontalGridLines</tt> to false tells the table
            view not to draw horizontal grid lines separating its cells. Vertical grid lines will
            still be drawn; however, these can be turned off as well by setting
            <tt>showVerticalGridLines</tt> to false.
        </p>

        <h3>TableView Columns</h3>

        <p>
            The application defines three columns for the table view: one for the stock ticker
            symbol, another for the stock's current value, and a third for the change percentage.
            The name attribute defines the name of the column. It is not visible to the user, but
            is used as a key to map values in each row to their appropriate place in the table
            view; the value of the headerData attribute is what is actually shown to the user in
            the table view header. Note that the header data for each column is specified as a
            resource name so the header text can be localized.
        </p>

        <p>
            The width of each column in this example is set to a relative width of "1*". This
            means that each column will be allocated one third of the total width of the table
            view. Like <tt>TablePane</tt>, <tt>TableView</tt> columns can also be assigned an
            absolute or an automatic pixel width.
        </p>

        <p>
            The "value" and "change" columns define several additional attributes related to cell
            renderers. By default, table cells are drawn using a renderer that presents the cell's
            contents as a text string. Custom cell renderers can be used to present cell data
            formatted as a number, date, or otherwise. The Stock Tracker demo uses the built-in
            number cell renderer to format the value column and a custom renderer to display the
            values in the change column using either red or green text depending on the change
            direction. A complete discussion of cell renderers is outside the scope of this
            tutorial, but the source code for the custom renderer is as follows:
        </p>

        <source type="java">
            <![CDATA[
            package pivot.tutorials.stocktracker;

            import java.awt.Color;

            import pivot.wtk.TableView;
            import pivot.wtk.content.TableViewNumberCellRenderer;

            public class ChangeCellRenderer extends TableViewNumberCellRenderer {
                public static final Color UP_COLOR = new Color(0x00, 0x80, 0x00);
                public static final Color DOWN_COLOR = new Color(0xff, 0x00, 0x00);

                public void render(Object value, TableView tableView, TableView.Column column,
                    boolean rowSelected, boolean rowHighlighted, boolean rowDisabled) {
                    super.render(value, tableView, column, rowSelected, rowHighlighted, rowDisabled);

                    if (value != null
                        && !rowSelected) {
                        StockQuote stockQuote = (StockQuote)value;
                        float change = stockQuote.getChange();
                        getStyles().put("color", change < 0 ? DOWN_COLOR : UP_COLOR);
                    }
                }
            }
            ]]>
        </source>

        <h3>TableViewHeader</h3>

        <p>
            Pivot's <tt>TableView</tt> component does not include built-in header support; rather,
            support for column headings and resizing is provided by a separate
            <tt>TableViewHeader</tt> component. This is because <tt>TableView</tt> (and other
            similar components including <tt>ListView</tt> and <tt>TreeView</tt>) do not include
            built-in support for scrolling. Scrolling is provided by the <tt>ScrollPane</tt> class,
            discussed below.
        </p>

        <p>
            <img src="stock_tracker/table_view.png"/>
        </p>
        <p class="caption">Stock Tracker table view and table view header.</p>

        <p>
            The following markup is used to declare the table view header component for the Stock
            Tracker demo:
        </p>

        <source type="xml">
            <![CDATA[
            <TableViewHeader tableView="$stocksTableView" sortMode="single_column"/>
            ]]>
        </source>

        <p>
            That's it! The header automatically associates itself with the table view instance
            identified by the <tt>tableView</tt> attribute - no additional markup or coding is
            necessary.
        </p>

        <p>
            Note that <tt>TableViewHeader</tt> does not automatically perform sorting. Sorting
            is implemented in response to a <tt>sortChanged()</tt> event fired by the
            <tt>TableView</tt> itself. An example is shown below:
        </p>

        <source type="java">
            <![CDATA[
            stocksTableView.getTableViewSortListeners().add(new TableViewSortListener.Adapter() {
                @Override
                @SuppressWarnings("unchecked")
                public void sortChanged(TableView tableView) {
                    List<Object> tableData = (List<Object>)tableView.getTableData();
                    tableData.setComparator(new TableViewRowComparator(tableView));
                }
            });
            ]]>
        </source>

        <h3>ScrollPane</h3>

        <p>
            Pivot components do not manage scrolling internally - all scrolling in Pivot is handled
            by the <tt>ScrollPane</tt> class (more specifically, by an instance of the
            <tt>Viewport</tt> class, but the distinction is not relevant to this discussion). A
            scroll pane provides a windowed view onto another component and allows a user to select
            which part of the component is shown by dragging a horizontal or vertical scroll bar.
        </p>

        <p>
            The component being scrolled is called the "view", and is specified as a child of the
            scroll pane's <tt>&lt;view&gt;</tt> element. <tt>ScrollPane</tt> also provides support
            for fixed row and column headers that scroll with the view but always remain visible.
            These are defined using <tt>ScrollPane</tt>'s <tt>&lt;rowHeader&gt;</tt> and
            <tt>&lt;columnHeader&gt;</tt> sub-elements. A <tt>TableViewHeader</tt> is often used as
            a column header for a <tt>TableView</tt> instance, but a row or column header can be an
            instance of any type of component - for example, an application developer might create
            a "ruler" component to use as a header in a drawing program to help a designer
            visualize the scale of a large scrollable image.
        </p>

        <h2>Stock Quote Detail</h2>

        <p>
            The <tt>stocktracker.wtkx</tt> file defines the overall structure of the application,
            and the layout of the quote detail content is defined separately in
            <tt>stocktracker.detail.wtkx</tt>. Yet, when the application is run, it appears as
            though the entire application was defined in a single WTKX file. How does this work?
            The key is the <tt>wtkx:include</tt> tag:
        </p>

        <source type="xml">
            <![CDATA[
            <wtkx:include namespace="detail" src="stocktracker.detail.wtkx"/>
            ]]>
        </source>

        <p>
            The <tt>wtkx:include</tt> tag tells the WTKX serializer that a component should be
            placed here, but that the component's content is not defined in this file. The location
            of the actual content is specified by the src tag and is either an absolute (beginning
            with a slash character) or relative (no slash) path to another WTKX file. Relative
            paths are resolved in the context of the current WTKX file, and absolute paths are
            resolved in the context of the application's classpath. Fully-qualified URLs (those
            that begin with a protocol) are not supported.
        </p>

        <p>
            In addition to the <tt>src</tt> attribute, the <tt>wtkx:include</tt> tag accepts an
            optional <tt>wtkx:id</tt> attribute. This is used to partition the ID values defined in
            each WTKX file into separate namespaces, allowing developers to avoid naming
            collisions. Components are referenced by concatenating the include IDs with the
            component's ID; for example, the path "detail.changeLabel" refers to the <tt>Label</tt>
            with ID "changeLabel" defined in the <tt>stocktracker.detail.wtkx</tt> file.
        </p>

        <h3>Forms</h3>

        <p>
            Though the top-level element of the detail page is a <tt>FlowPane</tt>, most of the
            layout is handled by the <tt>Form</tt> container. Forms arrange their children in a
            vertical stack, similar to a vertical <tt>FlowPane</tt>, prepending a text label to
            each field.
        </p>

        <p>
            <img src="stock_tracker/form.png"/>
        </p>
        <p class="caption">Stock Tracker detail view using Form container.</p>

        <p>
            A field's label is defined by a <tt>Form.name</tt> attribute attached to the child
            element, as shown below:
        </p>

        <source type="xml">
            <![CDATA[
            <Form styles="{padding:0, fill:true, showFlagIcons:false, showFlagHighlight:false,
                leftAlignLabels:true}">
                <sections>
                    <Form.Section>
                        <Label Form.name="%value" textKey="value"
                            styles="{horizontalAlignment:'right'}"/>
                        <Label wtkx:id="changeLabel" Form.name="%change" textKey="change"
                            styles="{horizontalAlignment:'right'}"/>
                        <Label Form.name="%openingValue" textKey="openingValue"
                            styles="{horizontalAlignment:'right'}"/>
                        <Label Form.name="%highValue" textKey="highValue"
                            styles="{horizontalAlignment:'right'}"/>
                        <Label Form.name="%lowValue" textKey="lowValue"
                            styles="{horizontalAlignment:'right'}"/>
                        <Label Form.name="%volume" textKey="volume"
                            styles="{horizontalAlignment:'right'}"/>
                    </Form.Section>
                </sections>
            </Form>
            ]]>
        </source>

        <p>
            Since the quote data is read-only, the "fields" in this example are actually
            themselves Label instances. Their form label values are specified as string resources
            so they can be easily translated.
        </p>

        <h3>Data Binding</h3>

        <p>
            Each <tt>Label</tt> in the form defines a <tt>textKey</tt> attribute. This attribute
            specifies the name of the property from which the label will obtain its text value
            during data binding. Specifically, it is the name of the value's key in the "bind
            context", an instance of <tt>Dictionary&lt;String, Object&gt;</tt> that is passed to
            the <tt>load()</tt> method of the <tt>Form</tt> instance, and then recursively to the
            <tt>Label</tt>s themselves. This is discussed in more detail in the data binding
            section.
        </p>

        <p>
            Though data binding is often used to populate a <tt>Form</tt>'s contents, there is
            nothing special about the Form class itself that supports data binding - it is
            supported by all container types and many component classes.
        </p>
    </body>
</document>
