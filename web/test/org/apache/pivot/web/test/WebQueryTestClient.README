/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// 
// WebQueryTestClientDigest.README
// 

This README file explains the setup required for the right execution of WebQueryTestClientBasic and WebQueryTestClientDigest Integration Tests with JUnit 4.

Requirements:
- Apache 2.x Web Server installed and working on localhost
- JUnit 4.x Test Runner, like that inside Eclipse


Test Setup:
- in the main Apache configuration file (APACHE_HOME/conf/httpd.conf) make some modify:

enable the digest authentication module, removing the comment on it, for example:
# LoadModule auth_digest_module modules/mod_auth_digest.so
LoadModule auth_digest_module modules/mod_auth_digest.so

Note that the module for the Basic Authentication (needed by the other class WebQueryTestClientBasic), by default is already enabled in Apache.


Then, enable the usage of .htaccess files on the root folder (by default htdocs), for a simpler per-directory authentication and authorization setup:

#     AllowOverride None
    AllowOverride All
or
    AllowOverride AuthConfig    

Note that this is only a convenience setting, targeted at these tests.


- test that Apache works, starting/restarting it, to ensure the configuration is right

- go into the published directory (htdocs, or public_html, depending on the environment) and create the following empty directories: 
public (optional), 
protected (for testing basic authentication), 
protected_digest (for testing digest authentication), 
dir (for testing digest authentication, using the same values from the RFC)

Copy some files (for example one binary like test.jpg, and one of text like test.txt) inside any of the previously-created directories.
In the dir directory, put a index.html file (required by the test, because all tests as explained in the RFC use it).


- in the "dir" directory, create a (text) file named .htaccess , and put inside this:
AuthType Digest

# Note that with Digest Authentication, the value of AuthName must be the same as the realm
AuthName "testrealm@host.com"

AuthDigestDomain /dir/ 
AuthDigestFile  "htdocs/dir/.htpasswd"
Require valid-user

# Hack for enabling pre IE 7 to work good with Digest Authentication
BrowserMatch "MSIE" AuthDigestEnableQueryStringHack=On


- in the "protected" dir (required by Basic Test), create a (text) file named .htaccess , and put inside this:
AuthType Basic
AuthName "Password Required"

AuthUserFile  "htdocs/protected/.htpasswd"
Require valid-user


- in the "protected_digest" dir, create a (text) file named .htaccess , and put inside this:
AuthType Digest

# Note that with Digest Authentication, the value of AuthName must be the same as the realm
AuthName "Password Required (Digest)"

AuthDigestDomain /protected_digest/ 
AuthDigestFile  "htdocs/protected_digest/.htpasswd"
Require valid-user

# Hack for enabling pre IE 7 to work good with Digest Authentication
BrowserMatch "MSIE" AuthDigestEnableQueryStringHack=On


- from the prompt, use some standard Apache commands to create the digested passwords.
If Apache commands are available in PATH, go directly in the target directory, 
otherwise for example you'll have to go to the main apache directory and launch them using for example bin\ht*.exe (for Windows), 
and then move the generated file into the right directory.

Optional, for the "protected" (Basic Authentication) for example use:
htpasswd -c .htpasswd test
htpasswd will ask you for the password (in this case "test0", but without quotes), and then ask you to type it again to confirm it

For the "protected_digest" (Digest Authentication) for example use:
htdigest -c .htpasswd "Password Required (Digest)" test
htdigest will ask you for the password (in this case "test0", but without quotes), and then ask you to type it again to confirm it

For the "dir" (Digest Authentication) for example use:
htdigest -c .htpasswd "testrealm@host.com" Mufasa
htdigest will ask you for the password (in this case "Circle Of Life", but without quotes), and then ask you to type it again to confirm it


- manual test using a browser (to ensure the directories has been protected in the right way): 
point to the URL http://localhost/ , and then add (by hand) the subdirectory names, and try to access.
Note that all protected directories are not visible from here.
Any time required, the browser will open an Authentication popup, where to put username/password data (always without quotes).

"protected/" needs username "test" and password "test0"
"protected_digest/" needs username "test" and password "test0"
"dir/" needs username "Mufasa" and password "Circle Of Life"


- execute the Test class, for example by running it from Eclipse (or by prompt), using JUnit 4, and see results.


// 
// End of Readme.
// 
